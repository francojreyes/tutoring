If I'm dealing with the set of numbers from 0 to n like a standard Graph, I can use an array
What if something like a wall of rocks?
If I want to know the predecessor of a Rock, I can't just do pred[rock]

Possible solutions: big matrix, made sense in lab07 but here is waste of space
Another solution: store an array of all rocks and their prdecessors, waste of time
Another solution: assign each item an ID, either confusing or will have to keep grabbing the ID again

Hash???
When you have a large domain but know you'll only deal with a small set of it
First we're gonna pick a size, there's 100 spaces on this wall but let's say there won't ever be more than like 15
Create a function that turns a rock into a (kinda) unique index - hash function!
Similar to assigning every item an ID, except we don't need to keep track of this, its O(1)

Here's an example
To get the pred of this rock, go to hash(rock)
When adding a rock, we can see if there's a matching rock at rocks[hash(newrock)]

But wait, some things have the same index - collision
Let's try increase the size
...
Okay so that took a while, and you can also increase so much until you're wasting again

Hash collison strats, tut question
Notes on empty

two sum

Heaps
Explain how the array represents a tree
- complete tree with bottom filled left-right
- * 2 = left, * 2 + 1 = right, / 2 = parent
Work through tute question as Tree and as array

Trie
Add some words - tut q12
Delete and search

Kahoot